//Leetcode - 983
//Dp-top Down
  int solve(vector<int>& days, vector<int>& costs,vector<int>& dp,int idx){
        if(idx>=days.size())return 0;
        if(dp[idx]!=-1)return dp[idx];
        int ans1 = costs[0] + solve(days,costs,dp,idx+1);
        int day = days[idx]+7-1;
        int idx7 = idx+1;
        while(idx7<days.size()&&days[idx7]<=day)idx7++;
        int ans2 = costs[1] + solve(days,costs,dp,idx7);
        
        int day30 = days[idx]+30-1;
        int idx30 = idx+1;
        while(idx30<days.size()&&days[idx30]<=day30)idx30++;
        int ans3 = costs[2] + solve(days,costs,dp,idx30);
        return dp[idx] = min(ans1,min(ans2,ans3));
}
    int mincostTickets(vector<int>& days, vector<int>& costs) {
    vector<int> dp(days[days.size()-1]+1,-1);
    return solve(days,costs,dp,0);
}
//Bottom Up
int mincostTickets(vector<int>& days, vector<int>& costs) {
        int n = days.size();
        vector<int>dp(days[n-1]+1,0);
        int day_idx = 0;
        for(int i=1;i<=days[n-1];i++){
            if(i!=days[day_idx])dp[i]=dp[i-1];
            else{
                dp[i] = min(dp[i-1]+costs[0],min(dp[max(0,i-7)]+costs[1],dp[max(0,i-30)]+costs[2]));
                day_idx++;
            }
        }
        return dp[days[n-1]];
    }
