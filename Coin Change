 //bottom up approach 
 int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,INT_MAX);
        dp[0]=0;
        for(int i=1;i<=amount;i++){
            for(int j=0;j<coins.size();j++){
                if(i-coins[j]>=0&&dp[i-coins[j]]!=INT_MAX)dp[i] = min(1+dp[i-coins[j]],dp[i]);
            }
        }
        if(dp[amount]==INT_MAX)return -1;
        return dp[amount];
}
//dp - memo
int solve_memo(vector<int>& num,int x,vector<int>& dp){
    if(x==0)return 0;
    if(x<0)return INT_MAX;
    if(dp[x]!=-1)return dp[x];
    int mini = INT_MAX;
    for(int i=0;i<num.size();i++){
        int ans = solve_memo(num,x-num[i],dp);
        if(ans!=INT_MAX)mini = min(mini,1+ans);
    }
    return dp[x] = mini;
}
int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
    vector<int> dp(x+1,-1);
    int ans= solve_memo(num,x,dp);
    if(ans==INT_MAX)return -1;
    return ans;
}

//Recusive
int solve_rec(vector<int>& num,int x){
    if(x==0)return 0;
    if(x<0)return INT_MAX;
    int mini = INT_MAX;
    for(int i=0;i<num.size();i++){
        int ans = solve_rec(num,x-num[i]);
        if(ans!=INT_MAX)mini = min(mini,1+ans);
    }
    return mini;
}
int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
    int ans= solve_rec(num,x);
    if(ans==INT_MAX)return -1;
    return ans;
}
    
