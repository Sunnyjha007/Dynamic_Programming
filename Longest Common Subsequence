//top-down
int solve(string & str1, string & str2,int m,int n,vector<vector<int>>& dp){
    if(m==0||n==0)return 0;
    if(dp[m][n]!=-1)return dp[m][n];
    if(str1[m-1]==str2[n-1]){
        return dp[m][n] =  1+solve(str1,str2,m-1,n-1,dp);
    }else{
        return dp[m][n] =  max(solve(str1,str2,m,n-1,dp),solve(str1,str2,m-1,n,dp));
    }
}
int getLengthOfLCS(string & str1, string & str2) {
  // Write your code here.
    int m = str1.size();
    int n = str2.size();
    vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
    return solve(str1,str2,m,n,dp);
}
//Bottom-Up
int getLengthOfLCS(string & str1, string & str2) {
int m = str1.size(),n = str2.size();
    vector<vector<int>> dp(m+1,vector<int>(n+1,0));
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(str1[i-1]==str2[j-1]){
                dp[i][j] = 1+dp[i-1][j-1];
            }else{
                dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    return dp[m][n];
}
