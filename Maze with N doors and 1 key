//Recursive way
bool solve(int row,int col,vector<vector<int>> &maze, int n,int key){
    if(row<0||row>=n||col<0||col>=n)return false;
    if(maze[row][col]==1){
        if(key==1){
            if(row==n-1&&col==n-1)return true;
            key = false;
            return solve(row+1,col,maze,n,key)||solve(row,col+1,maze,n,key);
        }else return false;   
    }
     if(row==n-1&&col==n-1)return true;
    return solve(row+1,col,maze,n,key)||solve(row,col+1,maze,n,key);  
}
bool mazeWithNDoorsAnd1Key(vector<vector<int>> &maze, int n)
{
	// Write your code here.
    //vector<vector<int>> visited(n,vector<int>(n,1));
     return solve(0,0,maze,n,1);
}
//Dp
bool mazeWithNDoorsAnd1Key(vector<vector<int>> &dp, int n)
{
	// Write your code here.
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(i==0&&j==0)continue;
            else if(i==0)dp[i][j] = min(2,dp[i][j]+dp[i][j-1]);
            else if(j==0)dp[i][j] = min(2,dp[i][j]+dp[i-1][j]);
            else {
                dp[i][j] = min(2,dp[i][j]+min(dp[i][j-1],dp[i-1][j]));
            }
        }
    }
    if(dp[n-1][n-1]==2)return false;
    return true;
}
