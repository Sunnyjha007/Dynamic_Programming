//Leetcode : 1981 -> 0-1 knapsack 
//Backtracking : TLE
void solve(vector<vector<int>>& mat,int target,int row,int sum,int& ans){
        if(row>=mat.size()){
            ans = min(ans,abs(target-sum));
            return;
        }
        for(int i=0;i<mat[0].size();i++){
            sum+=mat[row][i];
            solve(mat,target,row+1,sum,ans);
            sum-=mat[row][i];
        }
        return;
    }
    int minimizeTheDifference(vector<vector<int>>& mat, int target) {
        int n = mat[0].size(),ans=INT_MAX;
        solve(mat,target,0,0,ans);
        return ans;
 }
 //dp-memo
 int dp[71][5000];
    int m,n;
    int solve(vector<vector<int>>& mat, int target,int row,int sum){
        if(row>=m)
        {
            return abs(sum-target);
        }
        if(dp[row][sum]!=-1)
        {
            return dp[row][sum];
        }
        int ans=INT_MAX;
        for(int i=0;i<n;i++)
        {
            ans=min(ans,solve(mat,target,row+1,sum+mat[row][i]));
            if(ans==0)
            {
                break;
            }
        }
        return dp[row][sum]=ans;
    }
    int minimizeTheDifference(vector<vector<int>>& mat, int target) {
        memset(dp,-1,sizeof(dp));
        m = mat.size();
        n = mat[0].size();
        return solve(mat,target,0,0);
        
    }
    //dp-bottom up
    int minimizeTheDifference(vector<vector<int>>& mat, int target) {
        int m = mat.size(),n=mat[0].size();
        vector<vector<int>> dp(m+1,vector<int>(target+1,INT_MAX));
        for(int i=0;i<=target;i++)dp[0][i] = i;
        for(int i=1;i<=m;i++){
            for(int j=0;j<=target;j++){
                for(int k=0;k<n;k++){
                    if(mat[i-1][k]<=j){
                        dp[i][j] = min(dp[i][j],dp[i-1][j-mat[i-1][k]]);
                    }else{
                        dp[i][j]  = min(dp[i][j], (mat[i-1][k]-j)+dp[i-1][0]);
                    }
                }
            }
        }
        return dp[m][target];
    }
